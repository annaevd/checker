name: SAE Checker

on:
  workflow_dispatch: {}        # запускаем 1 раз руками; дальше — самоперезапуск

permissions:
  contents: write              # для коммита логов
  actions: write               # для self-dispatch

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 360       # максимум одного job — 6 часов

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref_name }}
      cancel-in-progress: true

    env:
      TZ: America/Montevideo
      PYTHON_VERSION: "3.11"
      VENV_DIR: .venv

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.PYTHON_VERSION }}-

      - name: Restore venv cache
        id: venv-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.VENV_DIR }}
          key: ${{ runner.os }}-venv-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}

      - name: Create venv & install deps (only on cache miss)
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: |
          set -euo pipefail
          python -m venv "${VENV_DIR}"
          "${VENV_DIR}/bin/python" -m pip install -U pip
          "${VENV_DIR}/bin/pip" install -r requirements.txt

      - name: Configure git for commits
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Run checker long loop (~2 min cadence) + per-iteration commit + Telegram on slot
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        timeout-minutes: 355
        run: |
          set -euo pipefail
          mkdir -p logs
          LOG="logs/$(date +%F).log"
          SLEEP_SEC=120
          START_EPOCH=$(date +%s)
          MAX_MIN=350  # ~5 ч 50 мин

          iter=0
          while :; do
            NOW=$(date +%s)
            ELAPSED_MIN=$(( (NOW - START_EPOCH) / 60 ))
            if [ "$ELAPSED_MIN" -ge "$MAX_MIN" ]; then
              echo "Reached ${MAX_MIN} minutes; exiting loop." | tee -a "$LOG"
              break
            fi

            iter=$((iter+1))
            echo "===== RUN $(date '+%Y-%m-%d %H:%M:%S %Z') (minute ${ELAPSED_MIN}/${MAX_MIN}, iter ${iter}) =====" | tee -a "$LOG"
            RUN_OUT="run.out"

            # 1) Запускаем чекер: и в общий лог, и в run.out
            "${VENV_DIR}/bin/python" checker.py | tee -a "$LOG" | tee "$RUN_OUT" >/dev/null

            # 2) Коммитим и пушим лог после каждой итерации
            git add -f "$LOG" || true
            git commit -m "Append log: $(date '+%F %T %Z') [iter ${iter}] [skip ci]" || echo "No changes to commit"
            git push || echo "Push failed (network hiccup?)"

            # 3) В Telegram шлём ТОЛЬКО если найдены слоты
            if [ -n "${BOT_TOKEN:-}" ] && [ -n "${CHAT_ID:-}" ] && grep -q "ЕСТЬ свободные места" "$RUN_OUT"; then
              rm -f chunk_*.txt || true
              awk -v max=3500 'BEGIN{c=1;l=0;fn=sprintf("chunk_%03d.txt",c)}
                {line=$0 ORS; if (l+length($0)+1>max){c++;fn=sprintf("chunk_%03d.txt",c);l=0}
                 printf "%s", line >> fn; l+=length($0)+1 }' "$RUN_OUT"

              shopt -s nullglob
              idx=0; total=$(ls -1 chunk_*.txt 2>/dev/null | wc -l | xargs)
              for f in chunk_*.txt; do
                idx=$((idx+1))
                printf "[%d/%d] " "$idx" "$total" | cat - "$f" > "${f}.send" && mv "${f}.send" "$f"
                curl -sS "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
                  --data-urlencode "chat_id=${CHAT_ID}" \
                  --data-urlencode "text@${f}" \
                  --data "disable_web_page_preview=true" >/dev/null || echo "Telegram send failed for $f"
              done
              rm -f chunk_*.txt
            fi

            # 4) Пауза ~2 мин до следующей итерации
            sleep "$SLEEP_SEC"
          done

      - name: Self-dispatch next run (immediate restart)
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          curl -sS -X POST \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/checker.yml/dispatches \
            -d "{\"ref\":\"${{ github.ref_name }}\"}"
